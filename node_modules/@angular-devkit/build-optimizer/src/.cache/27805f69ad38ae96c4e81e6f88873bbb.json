{"remainingRequest":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@ngx-translate/core/src/translate.directive.js","dependencies":[{"path":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@ngx-translate/core/src/translate.directive.js","mtime":1504629112000},{"path":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/cache-loader/dist/cjs.js","mtime":1528983285433},{"path":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, Input, ChangeDetectorRef } from '@angular/core';\nimport { equals, isDefined } from './util';\nimport { TranslateService } from './translate.service';\nvar TranslateDirective = /*@__PURE__*/ (function () {\n    function TranslateDirective(translateService, element, _ref) {\n        var _this = this;\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(function (event) {\n                if (event.lang === _this.translateService.currentLang) {\n                    _this.checkNodes(true, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe(function (event) {\n                _this.checkNodes(true, event.translations);\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(function (event) {\n                _this.checkNodes(true);\n            });\n        }\n    }\n    Object.defineProperty(TranslateDirective.prototype, \"translate\", {\n        set: function (key) {\n            if (key) {\n                this.key = key;\n                this.checkNodes();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateDirective.prototype, \"translateParams\", {\n        set: function (params) {\n            if (!equals(this.currentParams, params)) {\n                this.currentParams = params;\n                this.checkNodes(true);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TranslateDirective.prototype.ngAfterViewChecked = function () {\n        this.checkNodes();\n    };\n    TranslateDirective.prototype.checkNodes = function (forceUpdate, translations) {\n        if (forceUpdate === void 0) {\n            forceUpdate = false;\n        }\n        var nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (var i = 0; i < nodes.length; ++i) {\n            var node = nodes[i];\n            if (node.nodeType === 3) {\n                var key = void 0;\n                if (this.key) {\n                    key = this.key;\n                    if (forceUpdate) {\n                        node.lastKey = null;\n                    }\n                }\n                else {\n                    var content = this.getContent(node).trim();\n                    if (content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        }\n                        else if (node.originalContent && forceUpdate) {\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    };\n    TranslateDirective.prototype.updateValue = function (key, node, translations) {\n        var _this = this;\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            var onTranslation = function (res) {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = _this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                _this.setContent(node, _this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                _this._ref.markForCheck();\n            };\n            if (isDefined(translations)) {\n                var res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    };\n    TranslateDirective.prototype.getContent = function (node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    };\n    TranslateDirective.prototype.setContent = function (node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    };\n    TranslateDirective.prototype.ngOnDestroy = function () {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    };\n    return TranslateDirective;\n}());\nexport { TranslateDirective };\n\n",{"version":3,"file":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@ngx-translate/core/src/translate.directive.js.post-build-optimizer.js","sourceRoot":"","sources":["/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@ngx-translate/core/src/translate.directive.js.pre-build-optimizer.js"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, ChangeDetectorRef } from '@angular/core';\nimport { equals, isDefined } from './util';\nimport { TranslateService } from './translate.service';\nvar TranslateDirective = (function () {\n    function TranslateDirective(translateService, element, _ref) {\n        var _this = this;\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(function (event) {\n                if (event.lang === _this.translateService.currentLang) {\n                    _this.checkNodes(true, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe(function (event) {\n                _this.checkNodes(true, event.translations);\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(function (event) {\n                _this.checkNodes(true);\n            });\n        }\n    }\n    Object.defineProperty(TranslateDirective.prototype, \"translate\", {\n        set: function (key) {\n            if (key) {\n                this.key = key;\n                this.checkNodes();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateDirective.prototype, \"translateParams\", {\n        set: function (params) {\n            if (!equals(this.currentParams, params)) {\n                this.currentParams = params;\n                this.checkNodes(true);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TranslateDirective.prototype.ngAfterViewChecked = function () {\n        this.checkNodes();\n    };\n    TranslateDirective.prototype.checkNodes = function (forceUpdate, translations) {\n        if (forceUpdate === void 0) { forceUpdate = false; }\n        var nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (var i = 0; i < nodes.length; ++i) {\n            var node = nodes[i];\n            if (node.nodeType === 3) {\n                var key = void 0;\n                if (this.key) {\n                    key = this.key;\n                    if (forceUpdate) {\n                        node.lastKey = null;\n                    }\n                }\n                else {\n                    var content = this.getContent(node).trim();\n                    if (content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        }\n                        else if (node.originalContent && forceUpdate) {\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    };\n    TranslateDirective.prototype.updateValue = function (key, node, translations) {\n        var _this = this;\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            var onTranslation = function (res) {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = _this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                _this.setContent(node, _this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                _this._ref.markForCheck();\n            };\n            if (isDefined(translations)) {\n                var res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    };\n    TranslateDirective.prototype.getContent = function (node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    };\n    TranslateDirective.prototype.setContent = function (node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    };\n    TranslateDirective.prototype.ngOnDestroy = function () {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    };\n    return TranslateDirective;\n}());\nexport { TranslateDirective };\nTranslateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[translate],[ngx-translate]'\n            },] },\n];\n/** @nocollapse */\nTranslateDirective.ctorParameters = function () { return [\n    { type: TranslateService, },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n]; };\nTranslateDirective.propDecorators = {\n    'translate': [{ type: Input },],\n    'translateParams': [{ type: Input },],\n};\n"]}]}