{"remainingRequest":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@ngx-translate/core/src/translate.store.js","dependencies":[{"path":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@ngx-translate/core/src/translate.store.js","mtime":1504629112000},{"path":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/cache-loader/dist/cjs.js","mtime":1528983285433},{"path":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { EventEmitter } from \"@angular/core\";\nvar TranslateStore = /*@__PURE__*/ (function () {\n    function TranslateStore() {\n        /**\n         * The lang currently used\n         * @type {string}\n         */\n        this.currentLang = this.defaultLang;\n        /**\n         * a list of translations per lang\n         * @type {{}}\n         */\n        this.translations = {};\n        /**\n         * an array of langs\n         * @type {Array}\n         */\n        this.langs = [];\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<TranslationChangeEvent>}\n         */\n        this.onTranslationChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<LangChangeEvent>}\n         */\n        this.onLangChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<DefaultLangChangeEvent>}\n         */\n        this.onDefaultLangChange = new EventEmitter();\n    }\n    return TranslateStore;\n}());\nexport { TranslateStore };\n\n",{"version":3,"file":"/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@ngx-translate/core/src/translate.store.js.post-build-optimizer.js","sourceRoot":"","sources":["/home/admin_sncf/core/workspace/rgpd/pia/node_modules/@ngx-translate/core/src/translate.store.js.pre-build-optimizer.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,IAAI,cAAc,iBAAG,CAAC;IAClB;QACI;;;WAGG;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC;;;WAGG;QACH,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB;;;WAGG;QACH,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB;;;;;;WAMG;QACH,IAAI,CAAC,mBAAmB,GAAG,IAAI,YAAY,EAAE,CAAC;QAC9C;;;;;;WAMG;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QACvC;;;;;;WAMG;QACH,IAAI,CAAC,mBAAmB,GAAG,IAAI,YAAY,EAAE,CAAC;IAClD,CAAC;IACD,MAAM,CAAC,cAAc,CAAC;AAC1B,CAAC,EAAE,CAAC,CAAC;AACL,OAAO,EAAE,cAAc,EAAE,CAAC","sourcesContent":["import { EventEmitter } from \"@angular/core\";\nvar TranslateStore = (function () {\n    function TranslateStore() {\n        /**\n         * The lang currently used\n         * @type {string}\n         */\n        this.currentLang = this.defaultLang;\n        /**\n         * a list of translations per lang\n         * @type {{}}\n         */\n        this.translations = {};\n        /**\n         * an array of langs\n         * @type {Array}\n         */\n        this.langs = [];\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<TranslationChangeEvent>}\n         */\n        this.onTranslationChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<LangChangeEvent>}\n         */\n        this.onLangChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<DefaultLangChangeEvent>}\n         */\n        this.onDefaultLangChange = new EventEmitter();\n    }\n    return TranslateStore;\n}());\nexport { TranslateStore };\n"]}]}